static void error_callback(int error, const char* description) {
    fputs(description, stderr);
}
static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods) {
   printf("%d\n", key);
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, GL_TRUE);
}
 
 
 ==== in main ======
 
 
   GLFWwindow* window;
   
   InitGeom();
   glfwSetErrorCallback(error_callback);

   glClearColor(0.5, 0.5, 0, 1.0f);                       
   glEnable(GL_DEPTH_TEST);   // Enable Depth Testing   GLFWwindow* window;
   
   /* Initialize the library */
   if (!glfwInit())
     return -1;

   /* Create a windowed mode window and its OpenGL context */
   window = glfwCreateWindow(640, 480, "T-Rex Gaiden", NULL, NULL);
   if (!window) {
     glfwTerminate();
     return -1;
   }
   glfwMakeContextCurrent(window);

   //test the openGL version
   getGLversion();
   //install the shader
   if (!InstallShader(textFileRead((char *)"shaders/vert.glsl"), 
    textFileRead((char *)"shaders/frag.glsl"))) {
      printf("Error installing shader!\n");
      return 0;
   }
   
   glUseProgram(ShadeProg);

   glfwSetKeyCallback(window, key_callback);

   // GLFW MAIN LOOP
   while (!glfwWindowShouldClose(window)) {
        float ratio;
        int width, height;
        glfwGetFramebufferSize(window, &width, &height);
        ratio = width / (float) height;
        glViewport(0, 0, width, height);
        glClear(GL_COLOR_BUFFER_BIT);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(-ratio, ratio, -1.f, 1.f, 1.f, -1.f);
        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();
        glRotatef((float) glfwGetTime() * 50.f, 0.f, 0.f, 1.f);
        glBegin(GL_TRIANGLES);
        glColor3f(1.f, 0.f, 0.f);
        glVertex3f(-0.6f, -0.4f, 0.f);
        glColor3f(0.f, 1.f, 0.f);
        glVertex3f(0.6f, -0.4f, 0.f);
        glColor3f(0.f, 0.f, 1.f);
        glVertex3f(0.f, 0.6f, 0.f);
        glEnd();
        glfwSwapBuffers(window);
        glfwPollEvents();
   }

