Brisk -- Written by Charles Lockner

You will find my code spread between 5 files: brisk.cp, briskhelper.cpp, composer.cpp, briskhelper.h, and composer.h

In the recording that comes with this, you will hear the following:

The first is a flange, which has two parameters: rate and depth. Rate controls how fast the flange adjusts its position with repect to the current sample. Depth controls how many indexes back the flange will traverse. In my audio file you will hear me quickly increase the flange from 0 to about .3 Hz. The flange is more recognizable around 1:30 of the sound file. 
This time I actually got it working without clicks. On my project 3 I implemented a flange, but it didn't sound too good. For this project I have floating values for the index of the flange and take a weighted average of the indices on either sides of the floating point. It's easier to explain if you look at my getSample() function in the composer.cpp file. Additionally, the flange works accross two channels now. Not just one.

Next, I add in an lfo. Just like my flange, this lfo also has two parameters: rate and amplitude. I increase both throughout the recording.

After this, you will hear an increase in the tempo and the key will change. To change keys, I whistle into the microphone, however I cut the whistling out from the recording to make it sound better. In order to make the whistling work, I used an fft library called FFTW and assigned the most prominent frequency to my algorithm. 

From here on out everything becomes steadily crazier as I increase all of the parameters in my program.


There are a couple parts of the program that I didn't display in my sound file. The first is the ability to change modes (Ionian, Dorian... etc). The second is the envelope system I implemented in my code. To change the shape of the note, you can simply give the system 5 parameters (as you discussed in class) to shape the entire note. Last is the graphics I briefly displayed that showed the frequency distribution from the fourier transform. You can find this code in brisk.c


If you want to test the code out yourself I summarize here what all the keys do (Although I now realize that you have to have the two libraries installed to have Make run succesfully):

	P = Toggle playing
	R = Toggle recording
Space = Toggle between playing and recording
	N = Next mode
	A = Decrease LFO Amplitude
	S = Increase LFO Amplitude
	Z = Decrease LFO Rate
	X = Increase LFO Rate
	D = Decrease Flange Depth
	F = Increase Flange Depth
	C = Decrease Flange Rate
	V = Increase Flange Rate
	- = Decrease tempo
	+ = Increase tempo
	Q = Quit

Anyways, that's it. Thanks for the fun quarter! Have a good break.
